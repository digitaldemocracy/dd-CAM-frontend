{"ast":null,"code":"var _jsxFileName = \"/Users/lukeaitchison/StatusTesting/react-frontend/src/index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOMClient from \"react-dom/client\";\nimport \"./index.css\";\nimport axios from 'axios';\nimport Table from \"./Table.js\";\nimport NavBar from \"./NavBar.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyApp() {\n  _s();\n  const [config, setConfig] = useState({});\n  const [logs, setLogs] = useState({});\n  useEffect(() => {\n    fetchConfig().then(result => {\n      if (result) setConfig(JSON.parse(result));\n    });\n    fetchLogs().then(result => {\n      if (result) setLogs(JSON.parse(result));\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Log Status Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      logs: logs,\n      config: config\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n// Create the container\n_s(MyApp, \"3lPRckBIbnS5nClAnbTtFkxtEls=\");\n_c = MyApp;\nconst container = document.getElementById(\"root\");\n\n// Create a root\nconst root = ReactDOMClient.createRoot(container);\nasync function fetchConfig() {\n  try {\n    const response = await axios.get('http://localhost:5001/config/config.json');\n    return JSON.stringify(response.data);\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}\nasync function fetchLogs() {\n  try {\n    const response = await axios.get('http://localhost:5001/logs/logs');\n    return JSON.stringify(response.data);\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}\n\n// Initial render: Render an element to the Root\nroot.render( /*#__PURE__*/_jsxDEV(MyApp, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 63,\n  columnNumber: 13\n}, this));\nvar _c;\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"names":["React","useEffect","useState","ReactDOMClient","axios","Table","NavBar","jsxDEV","_jsxDEV","MyApp","_s","config","setConfig","logs","setLogs","fetchConfig","then","result","JSON","parse","fetchLogs","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","container","document","getElementById","root","createRoot","response","get","stringify","data","error","console","log","render","$RefreshReg$"],"sources":["/Users/lukeaitchison/StatusTesting/react-frontend/src/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOMClient from \"react-dom/client\";\nimport \"./index.css\";\nimport axios from 'axios';\nimport Table from \"./Table.js\";\nimport NavBar from \"./NavBar.js\";\n\nfunction MyApp() {\n  const [config, setConfig] = useState({});\n  const [logs, setLogs] = useState({});\n\n  useEffect(() => {\n\n    fetchConfig().then( result => {\n       if (result)\n          setConfig(JSON.parse(result));\n     });\n\n     fetchLogs().then( result => {\n      if (result)\n         setLogs(JSON.parse(result));\n    });\n\n  }, [] );\n  return (\n    <div>\n      <h1>Log Status Checker</h1>\n      <NavBar />\n      <Table logs = {logs} config = {config}></Table>\n    </div>\n  );\n}\n\n// Create the container\nconst container = document.getElementById(\"root\");\n\n// Create a root\nconst root = ReactDOMClient.createRoot(container);\n\nasync function fetchConfig(){\n  try {\n     const response = await axios.get('http://localhost:5001/config/config.json');\n     return JSON.stringify(response.data);     \n  }\n  catch (error){\n     console.log(error); \n     return false;         \n  }\n}\n\nasync function fetchLogs(){\n  try {\n     const response = await axios.get('http://localhost:5001/logs/logs');\n     return JSON.stringify(response.data);     \n  }\n  catch (error){\n     console.log(error); \n     return false;         \n  }\n}\n\n// Initial render: Render an element to the Root\nroot.render(<MyApp />);"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,aAAa;AACpB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,MAAM,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpCD,SAAS,CAAC,MAAM;IAEdc,WAAW,CAAC,CAAC,CAACC,IAAI,CAAEC,MAAM,IAAI;MAC3B,IAAIA,MAAM,EACPL,SAAS,CAACM,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC,CAAC;IAClC,CAAC,CAAC;IAEFG,SAAS,CAAC,CAAC,CAACJ,IAAI,CAAEC,MAAM,IAAI;MAC3B,IAAIA,MAAM,EACPH,OAAO,CAACI,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC,CAAC;IAChC,CAAC,CAAC;EAEJ,CAAC,EAAE,EAAG,CAAC;EACP,oBACET,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BjB,OAAA,CAACF,MAAM;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVjB,OAAA,CAACH,KAAK;MAACQ,IAAI,EAAIA,IAAK;MAACF,MAAM,EAAIA;IAAO;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV;;AAEA;AAAAf,EAAA,CA1BSD,KAAK;AAAAiB,EAAA,GAALjB,KAAK;AA2Bd,MAAMkB,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;;AAEjD;AACA,MAAMC,IAAI,GAAG3B,cAAc,CAAC4B,UAAU,CAACJ,SAAS,CAAC;AAEjD,eAAeZ,WAAWA,CAAA,EAAE;EAC1B,IAAI;IACD,MAAMiB,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAAC,0CAA0C,CAAC;IAC5E,OAAOf,IAAI,CAACgB,SAAS,CAACF,QAAQ,CAACG,IAAI,CAAC;EACvC,CAAC,CACD,OAAOC,KAAK,EAAC;IACVC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO,KAAK;EACf;AACF;AAEA,eAAehB,SAASA,CAAA,EAAE;EACxB,IAAI;IACD,MAAMY,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAAC,iCAAiC,CAAC;IACnE,OAAOf,IAAI,CAACgB,SAAS,CAACF,QAAQ,CAACG,IAAI,CAAC;EACvC,CAAC,CACD,OAAOC,KAAK,EAAC;IACVC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO,KAAK;EACf;AACF;;AAEA;AACAN,IAAI,CAACS,MAAM,eAAC/B,OAAA,CAACC,KAAK;EAAAa,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,CAAC;AAAC,IAAAC,EAAA;AAAAc,YAAA,CAAAd,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}